buildscript {
    ext {
        flywayVersion = '7.0.0'
        groovyVersion = '3.0.10'
        h2Version = '1.4.200'
        jacocoToolVersion = '0.8.6'
        jUnitVersion = '4.13.2'
        lombokVerison = '1.18.24'
        postgresqlVersion = '42.2.19'
        spockVersion = '2.1-groovy-2,5'
        spokSpringVersion = '2.1-groovy-3.0'
        springBootVersion = '2.4.2'
        springFoxUiVersion = '3.0.0'
        springFoxStarterVersion = '3.0.0'
        springDependencyersMenagmentVersion = '1.0.11.RELEASE'
        springFramevorkBootVersion = '2.7.6'
        mongoVersion = '3.12.8'
    }
}
plugins {
    id 'checkstyle'
    id 'groovy'
    id 'io.spring.dependency-management' version "${springDependencyersMenagmentVersion}"
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version "${springFramevorkBootVersion}"
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}
dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVerison}"
    compileOnly "org.projectlombok:lombok:${lombokVerison}"
    compileOnly "org.flywaydb:flyway-core:${flywayVersion}"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"
    runtimeOnly "com.h2database:h2:${h2Version}"
    implementation "org.mongodb:mongo-java-driver:${mongoVersion}"

    implementation "io.springfox:springfox-boot-starter:${springFoxStarterVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxUiVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.1"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation "org.codehaus.groovy:groovy:${groovyVersion}"
    testImplementation "org.spockframework:spock-core:${spokSpringVersion}"
    testImplementation "junit:junit:${jUnitVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.spockframework:spock-spring:${spokSpringVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVerison}"
    testCompileOnly "org.projectlombok:lombok:${lombokVerison}"
}

group = 'pl.futurecollars.invoicing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11.0.16'

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}
check {
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:

                    ['pl/futurecollars/invoicing/db/FileBasedDatabase.class',
                     'pl/futurecollars/invoicing/db/IdService.class',
                     'pl/futurecollars/invoicing/db/DatabaseConfigurator.class',
                     'pl/futurecollars/invoicing/utils/FileService.class'])
        }))
    }
    dependsOn test // tests are required to run before generating the report
}
jacoco {
    toolVersion = "0.8.6"
}

checkstyle {
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:

                    ['pl/futurecollars/invoicing/db/FileBasedDatabase.class',
                     'pl/futurecollars/invoicing/db/IdService.class',
                     'pl/futurecollars/invoicing/db/DatabaseConfigurator.class',
                     'pl/futurecollars/invoicing/utils/FileService.class'])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.9
            }
        }

        rule {
            limit {
                counter = 'LINE'
                minimum = 0.9
            }
        }
    }
}
task testWithMemoryDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'dev'
    useJUnitPlatform()
}

task testWithJPADatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'jpa'
    useJUnitPlatform()
}
task testWithMongoDatabase(type: Test) {
    systemProperty 'spring.profiles.active', 'mongo'
    useJUnitPlatform()
}

check.dependsOn testWithMemoryDatabase
check.dependsOn testWithJPADatabase
check.dependsOn testWithMongoDatabase